{
  "author": {
    "name": "Saar Yahalom"
  },
  "name": "docrouter",
  "description": "Documented Connect/Express Router. Send OPTIONS to see what kind of operations a Connect/Express server supports.",
  "version": "0.0.5",
  "repository": {
    "type": "git",
    "url": "git://github.com/anodejs/node-docrouter.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "nodeunit tests"
  },
  "engines": {
    "node": "~0.6.5"
  },
  "keywords": [
    "node",
    "connect",
    "router",
    "wadl"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.html"
    }
  ],
  "dependencies": {
    "connect": ">= 0.8.7",
    "xmlbuilder": ">= 0.3.1",
    "jade": ">= 0.20.0"
  },
  "devDependencies": {
    "nodeunit": "0.5.5"
  },
  "readme": "# DocRouter #\r\nA Connect/Express router wrapper which exposes a formatted description of the available services of a server.\r\nThe documentation is available is multiple formats (Html, Wadl, Json).\r\n\r\nThe usage mimics the regular router's behavior.\r\n\r\n## Retrieving the documentation ##\r\nTwo options:\r\n\r\n- !! (GET http://myservice.mydomain.com/!!)\r\n- OPTIONS (OPTIONS http://myservice.mydomain.com/)\r\n\r\n## Supported outputs ##\r\n- JSON (Accept: application/json) \r\n- WADL (Accept: text/xml)\r\n- HTML (Accept: text/html)\r\n\r\n# Examples #\r\n## Connect Style ##\r\n\r\n```\r\n﻿var docRouter = require('docrouter').DocRouter;\r\nvar server = connect.createServer(docRouter(connect.router, \"http://myservice.mydomain.com\", function(app) {\r\n    app.get('/:app', handleGetApp,\r\n        {\r\n            id: \"GetApp\",\r\n            doc: \"Gets the app\",\r\n            params: {\r\n                app: {\r\n                    style: \"template\",\r\n                    type: \"string\",\r\n                    required: true\r\n                }\r\n            },\r\n            response: {\r\n                doc: \"Description of response body\",\r\n                example: \"{ name: 'myApp' }\"\r\n            }\r\n        });\r\n    app.post('/:app', handleAddApp,\r\n        {\r\n            id: \"UpdateApp\",\r\n            doc: \"Updates the app\",\r\n            params: {\r\n                app: {\r\n                    style: \"template\",\r\n                    type: \"string\",\r\n                    required: true\r\n                }\r\n            },\r\n            request: {\r\n                doc: \"Description of request body\",\r\n                params: {\r\n                    name: { doc: \"app new name\", type: \"string\", reuired: true }\r\n                },\r\n                example: \"POST /myApp \\n { name: 'my new app' }\"\r\n            }\r\n        });\r\n});\r\n);\r\nserver.listen(5000);\r\n```\r\n\r\n## Express Style ##\r\n```\r\n﻿var docRouter = require('docrouter').DocRouter;\r\nvar app = express.createServer();\r\n\r\ndocRouter(app, \"http://myservice.mydomain.com\");\r\n\r\napp.get('/:app', handleGetApp,\r\n    {\r\n        id: \"GetApp\",\r\n        doc: \"Gets the app\",\r\n        params: {\r\n            app: {\r\n                style: \"template\",\r\n                type: \"string\",\r\n                required: true\r\n            }\r\n        }\r\n    });\r\n\r\napp.post('/:app', handleAddApp,\r\n    {\r\n        id: \"UpdateApp\",\r\n        doc: \"Updates the app\",\r\n        params: {\r\n            app: {\r\n                style: \"template\",\r\n                type: \"string\",\r\n                required: true\r\n            }\r\n        }\r\n    });\r\n\r\napp.listen(5000);\r\n```\r\n\r\n#Credits#\r\n* **[xmlbuilder-js](https://github.com/oozcitak/xmlbuilder-js)** by [oozcitak](https://github.com/oozcitak).\r\n* **[jade](https://github.com/visionmedia/jade)** by [visionmedia](https://github.com/visionmedia).\r\n* **[connect](https://github.com/senchalabs/connect)** by [senchalabs](https://github.com/senchalabs).\r\n\r\n#License#\r\nMIT",
  "_id": "docrouter@0.0.5",
  "_from": "docrouter"
}
